import { ChunkType } from "./NeatConfigTypes";
import { TreeType } from "./RemoteRepo";
export declare class LocalFolder {
    readonly forceDownload: boolean;
    readonly forceInject: boolean;
    dir: string;
    only: RegExp | null;
    except: RegExp | null;
    constructor(forceDownload?: boolean, forceInject?: boolean, only?: string | undefined, except?: string | undefined, folder?: string);
    getEnvVars(addedFiles: Array<string>, skippedFiles: Array<string>, addedDirs: Array<string>, skippedDirs: Array<string>, addedChunks: Array<ChunkLogType>, skippedChunks: Array<ChunkLogType>): Array<{
        name: string;
        value: string;
    }>;
    downloadTree(tree: Array<TreeType>, ignore: Array<string>, preview?: boolean): Promise<string[][]>;
    injectChunks(chunks: Array<ChunkType>, preview?: boolean, onlyFiles?: Array<string> | null, replacements?: {
        [key: string]: string;
    }, filter?: RegExp): Promise<{
        addedChunks: ChunkLogType[];
        skippedChunks: ChunkLogType[];
        unknownChunks: ChunkLogType[];
    }>;
    injectChunk(chunk: ChunkType, preview: boolean | undefined, replacements: {
        [key: string]: string;
    }, filter: RegExp): Promise<boolean>;
    replaceFiles(files: Array<string>, replacements: {
        [key: string]: string;
    }, filter: RegExp): Promise<unknown[]>;
    replaceContent(content: string, replacements: {
        [key: string]: string;
    }, path?: string, filter?: RegExp): string;
    chunkToString(chunk: ChunkLogType): string;
    isAllowedDir(value: {
        path: string;
        type: string;
    }, ignore?: Array<string>): boolean;
    isAllowedFile(value: {
        path: string;
        type: string;
    }, ignore?: Array<string>): boolean;
    isAllowed(path: string, ignore: Array<string>): boolean;
}
export declare type ChunkLogType = {
    source: string;
    target: string;
    error?: string;
};
