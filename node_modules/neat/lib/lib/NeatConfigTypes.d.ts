/**
 * Config types
 */
export interface ChunkType extends YamlInjectType {
    target: string;
    pattern: string;
    if: Array<"no-file" | "no-pattern" | "single-pattern" | "double-pattern">;
    wrap: {
        before: string;
        after: string;
    };
}
export interface SymLinkType {
    source: string;
    target: string;
}
export interface ScriptCommandType {
    script: string;
    toString: () => string;
}
export declare function isScriptCommandType(input: unknown): input is ScriptCommandType;
export interface ReplacementType {
    before: string;
    after: string;
}
export interface QuestionType {
    name: string;
    type: "input" | "list" | "checkbox";
    message: string;
    default?: () => string;
    choices?: () => Array<string> | Array<QuestionChoiceType>;
}
export interface QuestionChoiceType {
    name: string;
    checked: boolean;
}
export declare function isQuestionChoiceType(input: unknown): input is QuestionChoiceType;
/**
 * YAML types
 */
export interface YamlSymLinkType {
    [k: string]: string;
}
export declare function isYamlSymLinkType(input: unknown): input is YamlSymLinkType;
export interface YamlScriptType {
    script: string;
}
export declare function isYamlScriptType(input: unknown): input is YamlScriptType;
export declare function isCommand<TValue>(value: TValue | null | undefined): value is TValue;
export interface YamlAskType {
    id: string;
    description?: string;
    default?: string | Array<string> | Array<YamlAskChoiceType>;
    replace?: boolean;
}
export declare function isYamlAskType(input: unknown): input is YamlAskType;
export interface YamlAskChoiceType {
    [k: string]: boolean;
}
export declare function isYamlAskChoiceType(input: unknown): input is YamlAskChoiceType;
export interface YamlInjectType {
    id: string;
    target: string | Array<string>;
    pattern?: string;
    file?: string;
    url?: string;
    command?: string;
    before?: string;
    after?: string;
    if?: "no-file" | "no-pattern" | "single-pattern" | "double-pattern" | Array<"no-file" | "no-pattern" | "single-pattern" | "double-pattern">;
    ifnot?: "no-file" | "no-pattern" | "single-pattern" | "double-pattern" | Array<"no-file" | "no-pattern" | "single-pattern" | "double-pattern">;
    wrap?: {
        before?: string | false;
        after?: string | false;
    } | string | false;
}
export declare function isYamlInjectType(input: unknown): input is YamlInjectType;
/**
 * Other typeguards
 */
export declare function isNotEmpty<TValue>(value: TValue | string | null | undefined): value is TValue;
export declare function isString(value: unknown): value is string;
