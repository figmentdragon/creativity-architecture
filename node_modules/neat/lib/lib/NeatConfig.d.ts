import { ChunkType, QuestionType, ScriptCommandType, SymLinkType, YamlAskType, YamlInjectType } from "./NeatConfigTypes";
export declare class NeatConfig {
    readonly baseUrl: string;
    preRun: Array<string | ScriptCommandType>;
    preDownload: Array<string | ScriptCommandType>;
    postRun: Array<string | ScriptCommandType>;
    symLink: Array<SymLinkType>;
    ignore: Array<string>;
    questions: Array<QuestionType>;
    chunks: Array<ChunkType>;
    replacePattern: string;
    replaceFilter: RegExp;
    replacements: {
        [key: string]: string;
    };
    toReplace: Array<string>;
    constructor(config: string, baseUrl: string);
    /**
     * Checkers
     */
    hasQuestions(): boolean;
    hasChunks(): boolean;
    hasSymLink(): boolean;
    hasPreRun(): boolean;
    hasPreDownload(): boolean;
    hasPostRun(): boolean;
    hasReplace(): boolean;
    /**
     * Commands (pre-run, pre-download, post-run)
     */
    parseArrayCommands(input: unknown): Array<string | ScriptCommandType>;
    /**
     * Ignore
     */
    parseArrayStrings(input: unknown): Array<string>;
    /**
     * Symbolic links
     */
    parseArraySymLinks(input: unknown): Array<SymLinkType>;
    /**
     * Injections
     */
    parseArrayChunks(input: unknown): Array<ChunkType>;
    parseChunk(input: YamlInjectType): YamlInjectType | null;
    /**
     * Questions
     */
    parseArrayQuestions(input: unknown): Array<QuestionType>;
    parseQuestion(input: YamlAskType): QuestionType;
    getQuestions(): QuestionType[];
    addReplacementsFromAnswers(answers: {
        [key: string]: string;
    }): void[];
    getAnswersFromEnv(env: {
        [k: string]: string | undefined;
    }): {
        [key: string]: string;
    };
    getEnvFromAnswers(answers: {
        [key: string]: string;
    }): {
        name: string;
        value: string;
    }[];
    formatQuestionVar(question: string): string;
}
