async = require 'async'
j3 = require 'j3'
db = require './db'

class Store
  constructor : (options) ->
    @_dbConnStr = options.dbConnStr
    @_db = db.connect @_dbConnStr

  # 获取指定资源的权限分配记录
  getAssignmentsOfResource : (resource, callback) ->
    collection = db.getAssignmentsCollection @_db, resource.type
    filter =
      resId : resource.id
    collection.findItems filter, (err, assignments) ->
      if err then return callback err
      callback null, assignments

  # 设置资源的权限分配记录（会删除之前分配的，不在assignments列表中的记录）
  setAssignmentsOfResource : (resource, assignments, callback) ->
    collection = db.getAssignmentsCollection @_db, resource.type
    async.waterfall [ (callback) ->
      # 找出原有的权限记录
      filter =
        resId : resource.id
      collection.findItems filter, callback

    , (assignmentsInDb, callback) ->
      # 新增或更新
      assignmentsInDbMap = j3.toMap assignmentsInDb, (assignment) ->
        assignment.aseTp + assignment.aseId

      assignmentsToInsert = []
      async.forEachSeries assignments, (assignment, callback) ->
        assignment = j3.clone assignment

        assignment.resId = resource.id
        key = assignment.aseTp + assignment.aseId
        if assignmentsInDbMap[key]
          # 更新
          updateData = $set : j3.clone(assignment, ['permLvl', 'permVal', 'subPerm'], true)
          collection.update {_id:assignmentInDb._id}, updateData, callback
        else
          # 添加要新增的记录，在forEachSeries结束后批量插入
          assignmentsToInsert.push assignment
          callback()
        return

      , (err) ->
        if assignmentsToInsert.length is 0
          return callback err, assignmentsInDb

        # 插入新增的记录
        collection.insert assignmentsToInsert, (err) ->
          callback err, assignmentsInDb

    , (assignmentsInDb, callback) ->
      # 删除
      assignmentsMap = j3.toMap assignments, (assignment) ->
        assignment.aseTp + assignment.aseId
      assignmentIdsToRemove = []
      for assignment in assignmentsInDb
        key = assignment.aseTp + assignment.aseId
        if not assignmentsMap[key]
          assignmentIdsToRemove.push assignment._id

      if assignmentIdsToRemove.length is 0
        return callback()

      collection.remove {_id : $in : assignmentIdsToRemove}, callback

    ], callback

  # 分配资源的权限分配记录
  grantAssignmentsOfResource : (resource, assignments, callback) ->
    # TODO: 改为批量检查和批量插入方式，参考setAssignmentsOfResource方法
    collection = db.getAssignmentsCollection @_db, resource.type
    async.forEachSeries assignments, (assignment, callback) ->
      assignment = j3.clone assignment

      assignment.resId = resource.id
      filter =
        resId : assignment.resId
        aseTp : assignment.aseTp
        aseId : assignment.aseId
      collection.findOne filter, (err, assignmentInDb) ->
        if err then return callback err

        if assignmentInDb
          updateData = $set : j3.clone(assignment, ['permLvl', 'permVal', 'subPerm'], true)
          collection.update {_id:assignmentInDb._id}, updateData, (err) ->
            callback err
        else
          collection.insert assignment, (err) ->
            callback err

        return

    , callback

    return

  # 删除资源的权限分配记录
  removeAssignmentsOfResource : (resource, assignments, callback) ->
    collection = db.getAssignmentsCollection @_db, resource.type
    async.forEachSeries assignments, (assignment, callback) ->
      filter =
        resId : resource.id
        aseTp : assignment.aseTp
        aseId : assignment.aseId
      collection.remove filter, (err) ->
        if err then return callback err
        callback()

    , callback

  getAssignmentsOfAssignee : (assignee, resource, callback) ->
    collection = db.getAssignmentsCollection @_db, resource.type
    filter =
      aseTp : assignee.type
      aseId : assignee.id

    if resource.id
      filter.resId = resource.id

    collection.findItems filter, callback

module.exports = Store
